// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String    @unique
  password         String
  nickname         String    @unique
  introduce        String?   @db.Text
  teamCode         String
  joinStatus       Boolean   @default(false)
  authority        String
  createdAt        DateTime  @default(now())
  lastModifiedTime DateTime  @updatedAt
  Reserves         Reserve[]

  @@map("member")
}

model Space {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @unique
  location         String
  description      String?   @db.Text
  createdAt        DateTime  @default(now())
  lastModifiedTime DateTime  @updatedAt
  Photo            Photo[]
  Reserves         Reserve[]

  @@map("space")
}

model Photo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path      String
  name      String
  createdAt DateTime @default(now())
  spaceId   String   @db.Uuid
  space     Space    @relation(fields: [spaceId], references: [id])

  @@map("photo")
}

model Reserve {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime        DateTime
  endTime          DateTime
  description      String?  @db.Text
  createdAt        DateTime @default(now())
  lastModifiedTime DateTime @updatedAt
  Space            Space    @relation(fields: [spaceId], references: [id])
  spaceId          String   @db.Uuid
  Member           Member   @relation(fields: [memberId], references: [id])
  memberId         String   @db.Uuid

  @@map("reserve")
}

model ReserveLog {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reservedUser      String
  reservedSpaceName String
  reservedLocation  String
  reservedTimes     String
  state             String
  createdAt         DateTime @default(now())
  lastModifiedTime  DateTime @updatedAt

  @@map("reserve_log")
}
